# 算法初级

## 数据结构

### 线性结构

数据在逻辑上是连续的，而物理存储上不一定连续，取决于具体的实现。

#### 数组 Array

在内存物理分布上是连续的，所以可以**随机访问（RandomAccess）**。

#### 链表 List

在内存分布上是分散的，通过额外的指针连接前后节点。

#### 遍历

##### 顺序遍历

从前往后/从后往前

```java
int[] array = new int[size];
for(int i = 0; i < array.length; i++) {
  int cur = array[i];
  // ...
}
```

##### 左右指针

``` java
int l = i + 1;  
int r = nums.length - 1;  
while (l <= r) {  
  int total = cur + nums[l] + nums[r];  
  if (total == 0) {  
    // process logic
    ... 
    ++l;  
    --r;  
  } else if (total > 0){  
    --r;  
  } else {  
    ++l;  
  }
}
```

##### 快慢指针

```java
ListNode findMidNode(ListNode head) {
  ListNode slow = head;
  ListNode fast = head;
  while (fast != null && fast.next != null) {
    slow = slow.next;
    fast = fast.next.next;
  }
  return slow;
}
```

##### 前后指针

``` java
public ListNode reverseList(ListNode head) {
  ListNode pre = null;
  ListNode cur = head;
  while (cur != null) {
    ListNode tmp = cur.next;
    cur.next = pre;
    
    pre = cur;
    cur = tmp;
  }
  return pre;
}
```

##### 二分查找

针对**有序数组**，使用左右指针遍历的变种，所以它的前提条件：

- 可通过索引进行**随机访问**，即只针对 Array 有效
- sorted, 单调递增或者递减
- bounded，存在上下界

``` java
// x 平方根的整数部分 ans 是满足 k^2 ≤ x 的最大 k 值
public int mySqrt(int x) {  
  int left = 0;  
  int right = x;  
  int ans = -1;  
  while (left <= right) {  
    int mid = left + (right - left) / 2;  
    if ((long) mid * mid <= x) {  
      ans = mid;  
      left = mid + 1;  
    } else {  
      right = mid - 1;  
    }  
  }  
  return ans;  
}

private boolean search(int[] row, int target) {
    int l = 0;
    int r = row.length - 1;
    while (l <= r) {
      int m = l + (r - l) / 2;
      if (row[m] == target) {
        return true;
      }

      if (row[m] < target) {
        l = m + 1;
      } else {
        r = m - 1;
      }
    }
    return false;
  }
```

### 堆栈/栈 Stack

后进先出（LIFO, Last In First Out）

常见操作：

- push，将元素添加到栈的顶部
- pop，移除并返回栈顶的元素
- peek，查看栈顶的元素，但不移除它

### 队列 Queue

先进先出（FIFO, First In First Out）

常见操作：

- enqueue，将元素添加到队列的尾部
- dequeue，移除并返回队列头部的元素
- peek，返回队列头部的元素，但不移除它

### 树

#### 二叉树

##### 满二叉树

#### 二叉搜索树

#### 2-3树 && 红黑树

#### B/B+树

#### 字典树

#### 树的遍历

对树遍历的优化，主要通过以下的方式：

- 剪枝，避免不必要的计算
- 保存计算结果，避免重复计算

##### 深度优先(DFS)遍历

可基于父节点或子节点的状态来计算当前节点状态，是树中最常用的遍历方式。

对树的前序/中序/后序都可以通过 DFS 来实现。

```java
private int dfs(TreeNode node, Long preSum, Map<Long, Integer> preSums, int targetSum) {  
  if (node == null) {  
    return 0;  
  }  
  
  preSum = preSum + node.val;  
  int count = preSums.getOrDefault(preSum, 0) + 1;  
  // 设置当前结点的状态
  preSums.put(preSum, count);  
  
  // 收集当前结点的结果
  int ret = preSums.getOrDefault(preSum - targetSum, 0);  
  
  // 对子节点进行遍历
  ret += dfs(node.left, preSum, preSums, targetSum);  
  ret += dfs(node.right, preSum, preSums, targetSum);  
  
  // 基于子节点的结果来计算当前结果
  
  // 清理当前结点的状态
  preSums.put(preSum,  count - 1);  
  return ret;  
}
```

##### 广度优先(BFS)遍历

``` java
// 收集当前层的节点
Deque<TreeNode> queue = new ArrayDeque<>();  
queue.addLast(root);  
var result = new ArrayList<List<Integer>>();  
while (!queue.isEmpty()) {  
  // 队列中当前层的节点数量
  int count = queue.size();  
  List<Integer> layer = new ArrayList<>(count);  
  while (count-- != 0) {  
    // 获取当前层的节点
    TreeNode node = queue.removeFirst();  
    layer.add(node.val);  

    // 插入当前节点的下一层所有节点 
    if (Objects.nonNull(node.left)) {  
      queue.addLast(node.left);  
    }  
    if (Objects.nonNull(node.right)) {  
      queue.addLast(node.right);  
    }  
  }  
  result.add(layer);  
}
```

### 哈希表

#### 哈希冲突的常用解决方案 --- 拉链法



### 堆 Heap && 优先队列 priorityQueue

Heap 是完全二叉树结构，通常用于实现优先队列。堆可以分为最大堆和最小堆。

常见操作：

- insert，将新元素插入堆中，并调整堆结构以保持堆的性质。
- delete，移除堆顶元素（最大值或最小值），并调整堆结构以保持堆的性质。
- top，返回堆顶元素（最大值或最小值）。

```java
class KthLargest {
    private PriorityQueue<Integer> pq;
    private int k;

    public KthLargest(int k, int[] nums) {
      this.k = k;
      pq = new PriorityQueue<>();
      for (int i = 0; i < nums.length; i++) {
        add(nums[i]);
      }
    }

    public int add(int val) {
      pq.add(val);
      if (pq.size() > k) {
        pq.remove();
      }
      return pq.element();
    }
  }
```

## 排序

![sort-rank](sort-rank.png)

### 快速排序

``` java
public void qs(int[] nums, int start, int end) {
  if (start > end) {
    return;
  }

  int pi = qt(nums, start, end);
  qs(nums, start, pi - 1);
  qs(nums, pi + 1, end);
}

private int qt(int[] nums, int start, int end) {
  int pivot = nums[end];
  int wi = start;
  for(int i = start; i < end; i++) {
    if (nums[i] < pivot) {
      swap(nums, wi, i);
      ++wi;
    }
  }
  swap(nums, wi, end);
  return wi;
}

private void swap(int[] nums, int src, int target) {
  int tmp = nums[src];
  nums[src] = nums[target];
  nums[target] = tmp;
}
```

### 归并排序

## 查找

通过和目标进行等价性比较，来确定对象是否为要查找的目标，所以这些对象需要具有可比较性(Comparable)。

### 无序结构

### 有序结构

常见操作：

- 最大值
- 最小值
- 找出小于等于目标的最大值
- 找出大于等于目标的最小值
- 范围查询

## 分类

### 并查集 Union & Find

可以对数据进行分类/分组，流程：

- 初始化，每个元素的 root 指向自己
- Union，合并关联数据
- Find

优化策略：

- Find 优化：最主要的手段，对路径进行压缩，使路径的深度不会过大
- Union 优化：将深度较小的元素的 root 作为另一个元素的 root 的 root。

```java
public class UnionFind {
  private final int[] roots;
  public UnionFind(int n) {
    roots = new int[n];
    // 初始化，将每个元素的分组 root 指向自己
    for(int i = 0; i < n; i++) {
      roots[i] = i;
    }
  }

  private int find(int i) {
    int root = i;
    // 找到分组的根
    while (root != roots[root]) {
      root = roots[root];
    }

    // 路径压缩, 将同一组的元素的根都设为最顶层的根
    while (i != roots[i]) {
      int parent = roots[i];
      roots[i] = root;
      i = parent;
    }
    return root;
  }

  public void union(int p, int q) {
    int pr = find(p);
    int qr = find(q);
    roots[pr] = qr;
  }

  public boolean isConnected(int p, int q) {
    return find(p) == find(q);
  }
}
```

## 策略

### 分治 & 递归

把一个大的问题分解为相同的小问题，对每个小问题进行求解，最后合并得到最终的结果。

必要元素：

- 子问题的定义
- 递归终止条件

### 动态规划

基于之前的状态来求解当前状态，前后状态有一定的依赖关系。

必要元素：

- 状态定义
- 初始化状态
- 状态转移方程/递推公式，基于之前的结果来推导现有的结果。可以先用 递归 + 状态 来思考，然后转换为 递推（循环）

``` java
public int climbStairs(int n) {  
  // 状态定义，保存每一步的方法数量
  int[] result = new int[n + 1];  
  // 初始化状态
  result[0] = 0;  
  result[1] = 1;  
  result[2] = 2;  

  for (int i = 3; i <= n; i++) {  
    // 递推公式
    result[i] = result[i - 2] + result[i - 1];  
  }  
  return result[n];  
}
```

## 算法分析

- 时间复杂度
- 空间复杂度

## 优化策略

### 前缀和

一般用于计算**连续元素**的目标值

```java
public int subarraySum(int[] nums, int k) {
    int count = 0, preSum = 0;
    // 保存所有节点的前缀和以及数量,<前缀和， 数量>
    HashMap<Integer, Integer> mp = new HashMap<>();
    mp.put(0, 1);
    for (int i = 0; i < nums.length; i++) {
        preSum += nums[i];

        // 计算满足 k 的子数组 (s, cur] 或 [s+1, cur]，
        // 即 k = PreSum(cur) - PreSum(s)
        int expectedSubArrayPreSum = preSum - k;
        if (mp.containsKey(expectedSubArrayPreSum)) {
            count += mp.get(expectedSubArrayPreSum);
        }
        
        // 保存当前节点的前缀和
        mp.put(preSum, mp.getOrDefault(preSum, 0) + 1);
    }
    return count;
}
```

### 位运算

### 布隆过滤器
